package main

import "fmt"

// find biggest cube in 3d array
func main() {
	res := maxCube([][][]int{{
		{1, 1, 0, 1, 0, 0, 0},
		{0, 0, 1, 1, 1, 0, 0},
		{0, 0, 1, 1, 1, 0, 0},
		{0, 0, 1, 1, 1, 1, 1},
		{0, 0, 1, 1, 1, 1, 1},
	}, {
		{1, 1, 0, 1, 0, 0, 0},
		{0, 0, 1, 1, 1, 0, 0},
		{0, 0, 1, 1, 1, 0, 0},
		{0, 0, 1, 1, 1, 1, 1},
		{0, 0, 1, 1, 1, 1, 1},
	}, {
		{1, 1, 0, 1, 0, 0, 0},
		{0, 0, 1, 1, 1, 0, 0},
		{0, 0, 1, 1, 1, 0, 0},
		{0, 0, 1, 1, 1, 1, 1},
		{0, 0, 1, 1, 1, 1, 1},
	}})
	fmt.Println(res) // output 3
	res = maxCube([][][]int{{
		{1, 1, 0, 1, 0, 0, 0},
		{0, 0, 1, 1, 1, 0, 0},
		{0, 0, 0, 0, 1, 0, 0},
		{0, 0, 0, 1, 1, 1, 1},
		{0, 0, 1, 1, 1, 1, 1},
	}, {
		{1, 1, 0, 1, 0, 0, 0},
		{0, 0, 1, 1, 1, 0, 0},
		{0, 0, 0, 0, 1, 0, 0},
		{0, 0, 0, 1, 1, 1, 1},
		{0, 0, 1, 1, 1, 1, 1},
	}, {
		{1, 1, 0, 1, 0, 0, 0},
		{0, 0, 1, 1, 1, 0, 0},
		{0, 0, 0, 0, 1, 0, 0},
		{0, 0, 0, 1, 1, 1, 1},
		{0, 0, 1, 1, 1, 1, 1},
	}})
	fmt.Println(res)// output 2
	res = maxCube([][][]int{{
		{1, 1, 1, 1, 0, 0, 0},
		{1, 1, 1, 1, 1, 0, 0},
		{1, 1, 1, 1, 1, 0, 0},
		{1, 1, 1, 1, 1, 1, 1},
		{1, 1, 1, 1, 1, 1, 1},
	}, {
		{1, 1, 1, 1, 0, 0, 0},
		{1, 1, 1, 1, 1, 0, 0},
		{1, 1, 1, 1, 1, 0, 0},
		{1, 1, 1, 1, 1, 1, 1},
		{1, 1, 1, 1, 1, 1, 1},
	}, {
		{1, 1, 1, 1, 0, 0, 0},
		{1, 1, 1, 1, 1, 0, 0},
		{1, 1, 1, 1, 1, 0, 0},
		{1, 1, 1, 1, 1, 1, 1},
		{1, 1, 1, 1, 1, 1, 1},
	}, {
		{1, 1, 1, 1, 0, 0, 0},
		{1, 1, 1, 1, 1, 0, 0},
		{1, 1, 1, 1, 1, 0, 0},
		{1, 1, 1, 1, 1, 1, 1},
		{1, 1, 1, 1, 1, 1, 1},
	}})
	fmt.Println(res)// output 4
}

func maxCube(arr [][][]int) int {
	tmp := make([][][]int, len(arr))
	for i, _ := range tmp {
		tmp[i] = make([][]int, len(arr[0]))
		for j, _ := range tmp[i] {
			tmp[i][j] = make([]int, len(arr[0][0]))
		}
	}
	// dp
	max := 0
	for i, _ := range arr {
		for j, _ := range arr[i] {
			for k, _ := range arr[i][j] {
				if arr[i][j][k] == 0 {
					continue
				}
				if i == 0 || j == 0 || k == 0 {
					tmp[i][j][k] = 1
				} else {
					tmp[i][j][k] = min7(
						tmp[i-1][j][k],
						tmp[i-1][j-1][k],
						tmp[i-1][j-1][k-1],
						tmp[i-1][j][k-1],
						tmp[i][j-1][k],
						tmp[i][j-1][k-1],
						tmp[i-1][j-1][k-1]) + 1
				}
				if tmp[i][j][k] > max {
					max = tmp[i][j][k]
				}
			}
		}
	}

	return max
}

func min7(a1, a2, a3, a4, a5, a6, a7 int) int {
	return min(min(min(min(min(min(a1, a2), a3), a4), a5), a6), a7)
}

func min(a, b int) int {
	if a < b {
		return a
	}
	return b
}
